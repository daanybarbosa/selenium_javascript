{
  "stats": {
    "suites": 2,
    "tests": 3,
    "passes": 2,
    "pending": 0,
    "failures": 1,
    "start": "2021-11-22T22:13:26.738Z",
    "end": "2021-11-22T22:13:32.268Z",
    "duration": 5530,
    "testsRegistered": 3,
    "passPercent": 66.66666666666666,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a3a2d1e0-b77a-4536-ac40-5a60e6532fd0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dbc27cf3-fb08-41ec-8df4-58566e1892b9",
          "title": "add todo tests",
          "fullFile": "/Users/daniele/Estudos/webdriverio-selenium-js-workspace/JavaScript Test Automation Tutorial 2021/seleniumDemo/test/firstTest.js",
          "file": "/test/firstTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully adds a todo to application",
              "fullTitle": "add todo tests successfully adds a todo to application",
              "timedOut": null,
              "duration": 3251,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//async function example(){ //no Mocha nao é preciso usar a funçao example() \n        //steps \n        //launch the browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //navigate to our application\n        await driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n        //add a todo\n        //o programa ira procurar o id do campo e ira inserir o dado \n        await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n        //assert - ira buscar na lista (array) o ultimo item e ira retornar o texto presente nele \n        let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText()\n            .then(function (value) {\n                return value\n            });\n        // ** assert using node assertion \n        //ira checar duas strings combinam - recebe dois argumentos: 1 - o valor atual, 2 - valor esperado\n        //o valor atual estara armazenado na variavel todoText\n        //o valor esperado sera a variavel que estamos procurando \"Learn Selenium\"\n        //assert.strictEqual(todoText, \"Learn Selenium\")\n        //ira apresentar um erro, pois o valor atual:\"Learn JavaScript\" é diferente do valor esperado: \"Learn Selenium\" \n        //assert.strictEqual(todoText, \"Learn JavaScript\") // Error\n        // ** assert using chai should \n        //ira checar se o valor atual (todoText) é igual ao valor esperado (\"Learn Selenium\") \n        todoText.should.equal(\"Learn Selenium\");\n        //todoText.should.equal(\"Learn JavaScript\"); //Error\n        //close the browser \n        await driver.quit();\n        //Using locators \n        //example(); //no Mocha nao é preciso usar a funçao example()",
              "err": {},
              "uuid": "660661a0-c5e8-4b5e-8660-d00c2861fad0",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "660661a0-c5e8-4b5e-8660-d00c2861fad0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3251,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "0db4b810-b661-4d79-8076-17201c859edf",
          "title": "add another todo tests",
          "fullFile": "/Users/daniele/Estudos/webdriverio-selenium-js-workspace/JavaScript Test Automation Tutorial 2021/seleniumDemo/test/secondTest.js",
          "file": "/test/secondTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully adds a another todo to application",
              "fullTitle": "add another todo tests successfully adds a another todo to application",
              "timedOut": null,
              "duration": 3256,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let driver = await new Builder().forBrowser(\"chrome\").build();\n        //navigate to our application\n        await driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n        //add a todo\n        //o programa ira procurar o id do campo e ira inserir o dado \n        await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n        //assert - ira buscar na lista (array) o ultimo item e ira retornar o texto presente nele \n        let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText()\n            .then(function (value) {\n                return value\n            });\n        todoText.should.equal(\"Learn Selenium\");\n        //close the browser \n        await driver.quit();",
              "err": {},
              "uuid": "186d3ac6-f5c0-4e4d-94fd-2f10965e5af8",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new test for reporting",
              "fullTitle": "add another todo tests Adding a new test for reporting",
              "timedOut": null,
              "duration": 1900,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let driver = await new Builder().forBrowser(\"chrome\").build();\n        //navigate to our application\n        await driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n        //add a todo\n        //o programa ira procurar o id do campo e ira inserir o dado \n        await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n        //assert - ira buscar na lista (array) o ultimo item e ira retornar o texto presente nele \n        let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText()\n            .then(function (value) {\n                return value\n            });\n        todoText.should.equal(\"Learn JavaScipt\");\n        //close the browser \n        await driver.quit();",
              "err": {
                "message": "AssertionError: expected 'Learn Selenium' to equal 'Learn JavaScipt'",
                "estack": "AssertionError: expected 'Learn Selenium' to equal 'Learn JavaScipt'\n    at Context.<anonymous> (test/secondTest.js:48:25)\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)",
                "diff": "- Learn Selenium\n+ Learn JavaScipt\n"
              },
              "uuid": "4c2625aa-9212-477c-9741-90e402e550e7",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "186d3ac6-f5c0-4e4d-94fd-2f10965e5af8"
          ],
          "failures": [
            "4c2625aa-9212-477c-9741-90e402e550e7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5156,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}